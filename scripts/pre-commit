#!/bin/bash
# git hook to ensure code style
# ln -sf ../../scripts/pre-commit .git/hooks/

# shellcheck disable=2044,2046
# This script can't handle spaces in filenames. That would be challenging to do
# correctly, and we will hopefully never add a filename with a space to the
# repository.

set -o pipefail

result=0

# Allow to call the pre-commit hook with a list of files. This allows to run the
# script from the command line like this to check all files:
# $ ./scripts/pre-commit $(git ls-files)
files="$*"
if [ -z "$files" ]; then
  files="$(git diff --name-only --staged --diff-filter=ACMRTUXB)"
fi

function files_matching {
  local include="$1"
  local exclude="$2"
  # The diff-filter lists all but deleted files. The `echo` puts the output on
  # one line for easier copy-pasting.
  if [[ -z "${exclude}" ]]; then
    echo $(echo "$files" | tr ' ' '\n' | grep -E "${include}")
  else
    echo $(echo "$files" | tr ' ' '\n' | grep -E "${include}" | grep -vE "${exclude}")
  fi
}

go_files=$(files_matching "\.go$")

if [ -n "$go_files" ]; then
  # meh, gofmt does not set an exit code
  # TODO(rodrigoq): this will break if the filenames have spaces
  diff=$(gofmt -d -e $go_files)
  if [ -n "$diff" ]; then
    echo "$diff"
    files_to_fix=$(gofmt -l $go_files)
    echo "To fix, run: gofmt -w $files_to_fix"
    result=1
  fi
fi

py_files=$(files_matching "\.py$")

if [ -n "$py_files" ]; then
  which >/dev/null autopep8 || (echo "Please install autopep8"; exit 1)
  # TODO(rodrigoq): this will break if the filenames have spaces
  diff=$(autopep8 -d $py_files)
  if [ -n "$diff" ]; then
    echo "$diff"
    echo "To fix, run: autopep8 -i $py_files"
    result=1
  fi
fi

build_files=$(echo "$files" | tr ' ' '\n' \
  | grep -E "BUILD|WORKSPACE|[.]bzl" \
  | grep -v "maven_dependencies.bzl" \
  | grep -v "third_party/java")

if [ -n "$build_files" ]; then
  which >/dev/null buildifier || (echo "Please install buildifier"; exit 1)
  diff=$(buildifier -d $build_files)
  if [ -n "$diff" ]; then
    echo "$diff"
    echo "To fix, run: buildifier" \
      $(echo $(buildifier -mode=check $build_files | cut -d' ' -f1))
    result=1
  fi
fi

# Run Gazelle if a Go or BUILD file changes. This is a heuristic, but hopefully
# covers most cases where it is needed.
for workspace_dir in $(find -name WORKSPACE -printf "%h\n"); do
  bzl="$workspace_dir/BUILD.bazel"
  if [ -e "$bzl" ] && grep -q "gazelle(" "$bzl"; then
    # This calls gazelle for every workspace, affected or not.
    if [[ -n "$go_files" || -n "$build_files" ]]; then
      diff=$(cd ${workspace_dir} && bazel run :gazelle -- -mode=diff 2>/dev/null)
      if [ -n "$diff" ]; then
        echo "$diff"
        echo "To fix:"
        echo "  bazel run :gazelle"
        result=1
      fi
    fi
  fi
done

# Check for labels added by the unhelpful buildozer command from Bazel:
# https://github.com/bazelbuild/bazel/issues/4584
if [ -n "$build_files" ]; then
  illegal_jar_label="@\w*//jar"
  if grep -q "$illegal_jar_label" $build_files; then
    echo "Illegal JAR references found:"
    grep -H "$illegal_jar_label" $build_files
    echo "To fix, please replace them with references to //third_party/java."
    echo "This ensures that Bazel is aware of the transitive dependencies."
    echo "For example, instead of:"
    echo "  @com_google_guava_guava//jar"
    echo "  @com_google_http_client_google_http_client//jar"
    echo "Please use:"
    echo "  //third_party/java/com/google/guava"
    echo "  //third_party/java/com/google/http_client:google_http_client"
    result=1
  fi
fi


java_files=$(echo $(files_matching "\.java$"))
if [ -n "$java_files" ]; then
  which >/dev/null google-java-format || (echo "Please install google-java-format"; exit 1)
  diff=$(diff -u <(cat $java_files) <(google-java-format $java_files))
  if [ -n "$diff" ]; then
    echo "$diff"
    echo "To fix, run:"
    echo "    google-java-format -i $java_files"
    result=1
  fi
fi

ts_files=$(files_matching "\.ts$")

if [ -n "$ts_files" ]; then
  which >/dev/null clang-format || (echo "Please install clang-format"; exit 1)
  diff=$(diff -u <(cat $ts_files) <(clang-format $ts_files))
  if [ -n "$diff" ]; then
    echo "$diff"
    echo "To fix, run: clang-format -i $ts_files"
    result=1
  fi
fi

cpp_files=$(files_matching "\.(h|cc)$")

if [ -n "$cpp_files" ]; then
  which >/dev/null clang-format || (echo "Please install clang-format"; exit 1)
  diff=$(diff -u <(cat $cpp_files) <(clang-format -style=google $cpp_files))
  if [ -n "$diff" ]; then
    echo "$diff"
    echo "To fix, run: clang-format -style=google -i $cpp_files"
    result=1
  fi
fi

tf_files=$(files_matching "\.tf$")

if [ -n "$tf_files" ]; then
  if [[ -f WORKSPACE ]] ; then
    # cloud-robotics
    bazel build @hashicorp_terraform//:terraform
    TERRAFORM="${PWD}/bazel-out/../../../external/hashicorp_terraform/terraform"
  else
    # infrastructure
    TERRAFORM="/google/data/ro/teams/terraform/bin/terraform"
  fi
  tf_dirs=$(dirname $tf_files | sort | uniq)
  for tf_dir in $tf_dirs; do
    if ! ${TERRAFORM} fmt -write=false -list=false -check=true $tf_dir; then
      ${TERRAFORM} fmt -write=false -list=false -diff=true $tf_dir
      echo "To fix, run: ${TERRAFORM} fmt $tf_dir"
      result=1
    fi
  done
fi

# Run check when either a markdown file changes (it may have new embeddings) or
# an example file changes (it may have to be embedded).
# TODO(rodrigoq): only run if these files contain an embedmd tag.
md_files=$(files_matching "\.md$")
# TODO(rodrigoq): find a better way of checking if a file is embedded anywhere.
example_files=$(files_matching "example")
if [[ -n "$md_files" || -n "$example_files" ]]; then
  EMBEDMD=${GOPATH:-$HOME/go}/bin/embedmd
  if [[ ! -f "$EMBEDMD" ]] && ! go install github.com/campoy/embedmd@latest ; then
    echo "ERROR: embedmd not found and couldn't be installed." >&2
    result=1
  else
    # An unchanged .md file may still have changes in the embedded files.
    all_md_files=$(git ls-files | grep --color=never '\.md$')
    diff=$($EMBEDMD -d $all_md_files)
    if [[ $? -ne 0 ]] ; then
      echo "$diff"
      echo "To fix, run: $EMBEDMD -w \$(git ls-files | grep --color=never '\\.md$')"
      result=1
    fi
  fi
fi

SHELLCHECK_DIR="$HOME/.cache/cloud-robotics"
SHELLCHECK="${SHELLCHECK_DIR}/shellcheck-v0.6.0/shellcheck"
sh_files=$(files_matching "(\.sh$|pre-commit$)" "deployments/.*/config.sh")
# TODO(rodrigoq): enable shellcheck in the apps repo.
if [[ -n "$sh_files" && "$(basename "$PWD")" != "apps" ]] ; then
  if [[ ! -e "$SHELLCHECK" ]] ; then
    mkdir -p "$SHELLCHECK_DIR"
    curl -fsSL https://github.com/koalaman/shellcheck/releases/download/v0.6.0/shellcheck-v0.6.0.linux.x86_64.tar.xz \
      | tar -C "$SHELLCHECK_DIR" -xJf - || exit 1
  fi
  # Note: using a lower severity than `warning` is quite noisy.
  # SC1090 complains not being able able to follow `source "${DIR}/scripts/common.sh"`,
  # which is a common pattern and we don't benefit from shellcheck following the
  # `source` statement.
  if ! "$SHELLCHECK" --severity=warning -e SC1090 --external-sources $sh_files ; then
    echo "ERROR: shellcheck found issues. These need to be fixed manually." >&2
    result=1
  fi
fi

exit $result
